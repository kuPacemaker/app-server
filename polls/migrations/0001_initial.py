# Generated by Django 3.0.3 on 2020-10-26 12:18

from django.conf import settings
import django.contrib.auth.models
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('url_id', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('username', models.CharField(default='', max_length=30, unique=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='BKD',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('url_id', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('title', models.CharField(max_length=20)),
                ('body', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='Channel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('url_id', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('name', models.CharField(max_length=20)),
                ('description', models.CharField(blank=True, max_length=100)),
                ('accesspath', models.CharField(max_length=20, null=True, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='News',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('body', models.CharField(max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('channel', models.ForeignKey(db_column='ch_id', null=True, on_delete=django.db.models.deletion.CASCADE, to='polls.Channel')),
            ],
        ),
        migrations.CreateModel(
            name='QASet',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('url_id', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('valid', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question_text', models.CharField(max_length=200)),
                ('pub_date', models.DateTimeField(verbose_name='date published')),
            ],
        ),
        migrations.CreateModel(
            name='TestPlan',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('url_id', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('que_number', models.IntegerField(null=True)),
                ('release_time', models.DateTimeField(null=True)),
                ('released', models.BooleanField(default=False)),
                ('end_time', models.DateTimeField(null=True)),
                ('ended', models.BooleanField(default=False)),
                ('qaset', models.ForeignKey(db_column='set_id', on_delete=django.db.models.deletion.CASCADE, to='polls.QASet')),
            ],
        ),
        migrations.CreateModel(
            name='Unit',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('url_id', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('index', models.IntegerField(default=0)),
                ('name', models.CharField(max_length=20)),
                ('channel', models.ForeignKey(db_column='ch_id', on_delete=django.db.models.deletion.CASCADE, to='polls.Channel')),
            ],
            options={
                'unique_together': {('channel', 'index')},
            },
        ),
        migrations.CreateModel(
            name='UserNews',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('news', models.ForeignKey(db_column='news_id', on_delete=django.db.models.deletion.CASCADE, to='polls.News')),
                ('user', models.ForeignKey(db_column='user_id', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='UnitTest',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('test', models.OneToOneField(db_column='test_id', on_delete=django.db.models.deletion.CASCADE, to='polls.TestPlan')),
                ('unit', models.OneToOneField(db_column='unit_id', on_delete=django.db.models.deletion.CASCADE, to='polls.Unit')),
            ],
        ),
        migrations.CreateModel(
            name='UnitQA',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('qaset', models.OneToOneField(db_column='set_id', on_delete=django.db.models.deletion.CASCADE, to='polls.QASet')),
                ('unit', models.OneToOneField(db_column='unit_id', on_delete=django.db.models.deletion.CASCADE, to='polls.Unit')),
            ],
        ),
        migrations.CreateModel(
            name='UnitBKD',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('opened', models.BooleanField(default=False)),
                ('bkd', models.OneToOneField(db_column='bkd_id', on_delete=django.db.models.deletion.CASCADE, to='polls.BKD')),
                ('unit', models.OneToOneField(db_column='unit_id', on_delete=django.db.models.deletion.CASCADE, to='polls.Unit')),
            ],
        ),
        migrations.CreateModel(
            name='TestSet',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('url_id', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('received', models.BooleanField(default=False)),
                ('submitted', models.BooleanField(default=False)),
                ('score', models.FloatField(default=0.0)),
                ('test', models.ForeignKey(db_column='test_id', on_delete=django.db.models.deletion.CASCADE, to='polls.TestPlan')),
                ('user', models.ForeignKey(db_column='user_id', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('user', 'test')},
            },
        ),
        migrations.CreateModel(
            name='QAPair',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('url_id', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('index', models.IntegerField(default=0)),
                ('question', models.CharField(max_length=200)),
                ('answer', models.CharField(max_length=100)),
                ('answer_set', models.CharField(max_length=500)),
                ('qaset', models.ForeignKey(db_column='set_id', on_delete=django.db.models.deletion.CASCADE, to='polls.QASet')),
            ],
            options={
                'unique_together': {('qaset', 'index')},
            },
        ),
        migrations.AddField(
            model_name='news',
            name='unit',
            field=models.ForeignKey(db_column='unit_id', null=True, on_delete=django.db.models.deletion.CASCADE, to='polls.Unit'),
        ),
        migrations.CreateModel(
            name='Host',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('channel', models.ForeignKey(db_column='ch_id', on_delete=django.db.models.deletion.CASCADE, to='polls.Channel')),
                ('user', models.ForeignKey(db_column='user_id', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Guest',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('channel', models.ForeignKey(db_column='ch_id', on_delete=django.db.models.deletion.CASCADE, to='polls.Channel')),
                ('user', models.ForeignKey(db_column='user_id', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Choice',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('choice_text', models.CharField(max_length=200)),
                ('votes', models.IntegerField(default=0)),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='polls.Question')),
            ],
        ),
        migrations.CreateModel(
            name='BKDOwner',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('bkd', models.OneToOneField(db_column='bkd_id', on_delete=django.db.models.deletion.CASCADE, to='polls.BKD')),
                ('user', models.ForeignKey(db_column='user_id', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='TestPair',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('url_id', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('user_answer', models.CharField(blank=True, max_length=20)),
                ('correct', models.BooleanField(default=False)),
                ('pair', models.ForeignKey(db_column='pair_id', on_delete=django.db.models.deletion.CASCADE, to='polls.QAPair')),
                ('tset', models.ForeignKey(db_column='tset_id', on_delete=django.db.models.deletion.CASCADE, to='polls.TestSet')),
            ],
            options={
                'unique_together': {('tset', 'pair')},
            },
        ),
    ]
